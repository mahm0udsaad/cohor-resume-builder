generator client {
  provider   = "prisma-client-js"
  output     = "./generated/client"
  engineType = "binary"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  personalInfo  PersonalInfo?
  experiences   Experience[]
  educations    Education[]
  skills        Skill[]
  languages     Language[]
  courses       Course[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Resume {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String // Name of the resume
  modifiedAt DateTime @default(now())
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  personalInfo PersonalInfo?
  experiences  Experience[]
  educations   Education[]
  skills       Skill[]
  languages    Language[]
  courses      Course[]

  @@map("resumes")
}

type PersonalInfo {
  name     String
  jobTitle String
  summary  String
  contact  String[]
}

type Experience {
  jobTitle         String
  company          String
  startDate        DateTime?
  endDate          DateTime?
  responsibilities String
}

type Education {
  degree         String
  institution    String
  graduationDate DateTime?
}

type Skill {
  name  String
  level String
}

type Language {
  name        String
  proficiency String
}

type Course {
  name           String
  institution    String
  completionDate DateTime?
}
