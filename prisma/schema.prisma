generator client {
  provider   = "prisma-client-js"
  output     = "./generated/client"
  engineType = "binary"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Subscription {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId // This will ensure it's the same type as User.id
  transactionId String    @unique
  orderId       String
  amount        Float
  status        String
  paymentDate   DateTime  @default(now())
  plan          String
  endDate       DateTime?
  features      String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
}

model User {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  name                   String         @default("user")
  role                   String         @default("USER")
  email                  String         @unique
  emailVerified          Boolean?
  password               String?
  image                  String         @default("/user.png")
  accounts               Account[]
  sessions               Session[]
  resumes                Resume[]
  personalInfo           PersonalInfo?
  experiences            Experience[]
  educations             Education[]
  skills                 Skill[]
  languages              Language[]
  courses                Course[]
  createdAt              DateTime       @default(now())
  updatedAt              DateTime?      @updatedAt
  subscriptions          Subscription[]
  plan                   String         @default("free")
  planExpiryDate         DateTime?
  hasCompletedOnboarding Boolean        @default(false)
  verificationCode       String? // For email verification
  verificationExpires    DateTime? // Expiration time for verification code

  @@map("users")
}

model Plan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  price     Float
  templates String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  type       String   @default("EMAIL_VERIFICATION") // Add this field

  @@unique([identifier, token])
  @@map("verification_tokens")
}

type Theme {
  name            String
  primaryColor    String
  backgroundColor String
}

model Resume {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  modifiedAt   DateTime      @default(now())
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lng          String        @default("en")
  personalInfo PersonalInfo?
  experiences  Experience[]
  educations   Education[]
  skills       Skill[]
  languages    Language[]
  courses      Course[]

  themeId String? @db.ObjectId
  theme   Theme?

  @@map("resumes")
}

type PersonalInfo {
  name        String
  jobTitle    String
  imageUrl    String?
  phoneNumber String?
  summary     String
  contact     String[]
}

type Experience {
  jobTitle         String
  company          String
  startDate        DateTime?
  endDate          DateTime?
  isCurrentJob     Boolean?
  responsibilities String
}

type Education {
  degree         String
  institution    String
  graduationDate DateTime?
  gpaType        String?
  numericGpa     Float?
  descriptiveGpa String?
}

type Skill {
  name  String
  level String
}

type Language {
  name        String
  proficiency String
}

type Course {
  name           String
  institution    String
  completionDate DateTime?
}
