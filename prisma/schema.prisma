generator client {
  provider   = "prisma-client-js"
  output     = "./generated/client"
  engineType = "binary"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String        @unique
  photoURL      String
  emailVerified Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  personalInfo  PersonalInfo?
  experiences   Experience[]
  educations    Education[]
  skills        Skill[]
  languages     Language[]
  courses       Course[]
  resumes       Resumes[]

  @@map("users")
}

model PersonalInfo {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  jobTitle String
  summary  String
  contact  String[]
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId

  @@map("personal_info")
}

model Experience {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle         String
  company          String
  startDate        DateTime?
  endDate          DateTime?
  responsibilities String
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @db.ObjectId

  @@map("experiences")
}

model Education {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  degree         String
  institution    String
  graduationDate DateTime?
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId

  @@map("educations")
}

model Skill {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  level  String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("skills")
}

model Language {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  proficiency String
  user        User   @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId

  @@map("languages")
}

model Course {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  institution    String
  completionDate DateTime?
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId

  @@map("courses")
}

model Resumes {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String // Name of the resume template
  modifiedAt DateTime @default(now()) // Time of modification
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId

  @@map("resumes")
}
